name: Build and test (cmake based build)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest,
             macos-latest,
             windows-latest]

    steps:
    - uses: actions/checkout@v3
    - name: Prepare dependencies
      run:   |
        if [ "$RUNNER_OS" == "Linux" ]; then
             sudo apt-get update && \
             sudo apt-get install -yq \
               libasio-dev \
               libssl-dev zlib1g-dev \
               cmake graphviz doxygen
        elif [ "$RUNNER_OS" == "Windows" ]; then
             VCPKG_DEFAULT_TRIPLET=x64-windows vcpkg install
        elif [ "$RUNNER_OS" == "macOS" ]; then
             brew install asio openssl zlib doxygen graphviz
        else
             echo "$RUNNER_OS not supported"
             exit 1
        fi
      shell: bash
    - name: Configure CMake
      run: cmake -B build
      shell: bash      
    - name: Build
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}
      shell: bash      

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
